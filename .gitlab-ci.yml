# -*- indent-tabs-mode: nil -*-

variables:
  # Docker images for various distros and architectures

  AMD64_FEDORA_LATEST:       "registry.gitlab.com/alatiera/librsvg-oci-images/amd64/fedora:latest"
  AMD64_FEDORA_RAWHIDE:       "registry.gitlab.com/alatiera/librsvg-oci-images/amd64/fedora:rawhide"
  AMD64_OPENSUSE_TUMBLEWEED: "registry.gitlab.com/alatiera/librsvg-oci-images/amd64/opensuse:tumbleweed"
  AMD64_DEBIAN_TESTING:      "registry.gitlab.com/alatiera/librsvg-oci-images/amd64/debian:testing"
  AMD64_UBUNTU_DEVEL:      "registry.gitlab.com/alatiera/librsvg-oci-images/amd64/ubuntu:devel"

  I386_DEBIAN_TESTING:       "registry.gitlab.com/alatiera/librsvg-oci-images/i386/debian:testing"

  RUSTFMT_NIGHTLY:           "registry.gitlab.com/alatiera/rustfmt-oci-image/rustfmt:nightly"
  CLIPPY_NIGHTLY:            "registry.gitlab.com/alatiera/librsvg-oci-images/clippy:nightly"

stages:
  - test
  - lint
  - cross_distro

.test_template: &distro_test
  before_script:
    # CCache Config
    - mkdir -p ccache
    - mkdir -p .cargo_cache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - export CC="ccache gcc"

    # Only stuff inside the repo directory can be cached
    # Override the CARGO_HOME variable to force it location
    - export CARGO_HOME="${PWD}/.cargo_cache"
  script:
    - rustc --version && cargo --version
    - ./autogen.sh --enable-gtk-doc --enable-vala
    - make check

  after_script:
    - mkdir png_artifacts
    - cp /tmp/*.png png_artifacts

  artifacts:
    when: on_failure
    paths:
      - tests/*.log
      - png_artifacts

  cache:
    # JOB_NAME - Each job will have it's own cache
    # COMMIT_REF_SLUG = Lowercase name of the branch
    # ^ Keep diffrerent caches for each branch
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - target/
      - .cargo_cache/
      - ccache/

# TEST STAGE
########################################################################

fedora:test:
  image: $AMD64_FEDORA_LATEST
  stage: test
  variables:
    LIBRSVG_DEBUG: "yes"
  <<: *distro_test

fedora:test_release:
  image: $AMD64_FEDORA_LATEST
  stage: test
  variables:
    LIBRSVG_DEBUG: "no"
  <<: *distro_test


# CROSS DISTRO AMD64 TEST STAGE
#######################################################################

fedora:rawhide:
  image: $AMD64_FEDORA_RAWHIDE
  stage: cross_distro
  variables:
    LIBRSVG_DEBUG: "yes"
  <<: *distro_test
  only:
    - master@GNOME/librsvg
    - schedules
    - tags
    - web

opensuse:tumbleweed:
  image: $AMD64_OPENSUSE_TUMBLEWEED
  stage: cross_distro
  variables:
    LIBRSVG_DEBUG: "yes"
  <<: *distro_test
  only:
    - master@GNOME/librsvg
    - schedules
    - tags
    - web

debian:testing:
  image: $AMD64_DEBIAN_TESTING
  stage: cross_distro
  variables:
    LIBRSVG_DEBUG: "yes"
  <<: *distro_test
  only:
    - master@GNOME/librsvg
    - schedules
    - tags
    - web

# TODO: Enable this when ubuntu update it's rustc package
# https://gitlab.gnome.org/GNOME/librsvg/issues/213
# ubuntu:18.04:
#   image: $AMD64_UBUNTU_DEVEL
#   stage: cross_distro
#   <<: *distro_test
#   only:
#     - master@GNOME/librsvg
#     - schedules
#     - tags
#     - web


# CROSS DISTRO RELEASE AMD64 TEST STAGE
#######################################################################

fedora:rawhide_release:
  image: $AMD64_FEDORA_RAWHIDE
  stage: cross_distro
  variables:
    LIBRSVG_DEBUG: "no"
  <<: *distro_test
  only:
    - schedules
    - tags
    - web

opensuse:tumbleweed_release:
  image: $AMD64_OPENSUSE_TUMBLEWEED
  stage: cross_distro
  variables:
    LIBRSVG_DEBUG: "no"
  <<: *distro_test
  only:
    - schedules
    - tags
    - web

debian:testing_release:
  image: $AMD64_DEBIAN_TESTING
  stage: cross_distro
  variables:
    LIBRSVG_DEBUG: "no"
  <<: *distro_test
  only:
    - schedules
    - tags
    - web

# CROSS DISTRO i386
#######################################################################

debian:testing_i386:
  image: $I386_DEBIAN_TESTING
  stage: cross_distro
  variables:
    LIBRSVG_DEBUG: "yes"
  <<: *distro_test
  only:
    - master@GNOME/librsvg
    - schedules
    - tags
    - web

# CROSS DISTRO RELEASE i386
#######################################################################

debian:testing_release_i386:
  image: $I386_DEBIAN_TESTING
  stage: cross_distro
  variables:
    LIBRSVG_DEBUG: "no"
  <<: *distro_test
  only:
    - schedules
    - tags
    - web

# LINT STAGE
#######################################################################

# Configure and run rustfmt on nightly
# Exits and builds fails on bad format
rustfmt:
  image: $RUSTFMT_NIGHTLY
  stage: lint
  script:
    - rustc --version && cargo --version
    - cargo fmt --all -- --write-mode=diff


# Configure and run clippy on nightly
# Only fails on errors atm.
clippy:
  image: $CLIPPY_NIGHTLY
  stage: lint
  script:
    - rustc --version && cargo --version
    - cargo install clippy --force
    - cargo clippy --all
  when: manual
